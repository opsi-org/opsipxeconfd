#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
   = = = = = = = = = = = = = = = = = = = = = = = = = = =
   =   opsi pxe configuration daemon (opsipxeconfd)    =
   = = = = = = = = = = = = = = = = = = = = = = = = = = =
   
   opsiconfd is part of the desktop management solution opsi
   (open pc server integration) http://www.opsi.org
   
   Copyright (C) 2010 uib GmbH
   
   http://www.uib.de/
   
   All rights reserved.
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License version 2 as
   published by the Free Software Foundation.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
   
   @copyright:	uib GmbH <info@uib.de>
   @author: Jan Schneider <j.schneider@uib.de>
   @license: GNU General Public License version 2
"""

__version__ = '3.4.99'

# Imports
import os, sys, socket, stat, threading, getopt
from signal import *

# OPSI imports
from OPSI.Logger import *
from OPSI.Util.File import ConfigFile
from OPSI.Types import *
from OPSI.Backend.BackendManager import BackendManager

logger = Logger()

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# =                                     CLASS OPSIPXECONFD                                            =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
class Opsipxeconfd(threading.Thread):
	def __init__(self, config):
		threading.Thread.__init__(self)
		
		self.config   = config
		self._running = False
		
		self._backend = None
		self._socket = None
		self._clientConnectionLock = threading.Lock()
		self._pxeConfigWritersLock = threading.Lock()
		self._clientConnections = []
		self._pxeConfigWriters = []
		self._startupBootimageSetter = None
		
		self._setOpsiLogging()
		logger.comment(	"\n==================================================================\n" \
				+ "=           opsi pxe configuration service starting              =\n" \
				+ "==================================================================\n")
		
	def setConfig(self, config):
		logger.notice(u"Got new config")
		self.config = config
		
	def isRunning(self):
		return self._running
	
	def stop(self):
		logger.notice(u"Stopping opsipxeconfd main thread")
		try:
			self._socket.close()
		except Exception, e:
			logger.error(u"Failed to close socket: %s" % e)
		self._running = False
		
	def reload(self):
		logger.notice(u"Reloading opsipxeconfd")
		self._setOpsiLogging()
		self._createBackendInstance()
		self._createSocket()
		
	def _setOpsiLogging(self):
		# Set logging options
		if self.config['logFile']:
			logger.setLogFile( self.config['logFile'] )
		if self.config['logFormat']:
			logger.setLogFormat(self.config['logFormat'])
		logger.setFileLevel(self.config['logLevel'])
	
	def _createBackendInstance(self):
		logger.info(u"Creating backend instance")
		self._backend = BackendManager(
			dispatchConfigFile    = self.config['dispatchConfigFile'],
			# Avoid loops
			dispatchIgnoreModules = ['OpsiPXEConfd'],
			backendConfigDir      = self.config['backendConfigDir'],
			extensionConfigDir    = self.config['extensionConfigDir'],
			#aclFile            = self.config['aclFile']
		)
	
	def _createSocket(self):
		return self._createUnixSocket()
		
	def _createUnixSocket(self):
		logger.notice(u"Creating unix socket '%s'" % self.config['port'])
		if os.path.exists(self.config['port']):
			os.unlink(self.config['port'])
		self._socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
		try:
			self._socket.bind(self.config['port'])
		except Exception, e:
			raise Exception(u"Failed to bind to socket '%s': %s" % (self.config['port'], e))
		self._socket.settimeout(0.1)
		self._socket.listen(self.config['maxConnections'])
		
		mode = os.stat(self.config['port'])[0]
		os.chmod(self.config['port'], mode | stat.S_IROTH | stat.S_IWOTH)
	
	def _getConnection(self):
		logger.debug2(u"_getConnection()")
		(addr, sock) = (None, None)
		try:
			(sock, addr) = self._socket.accept()
		except socket.error, e:
			if (e.args[0] == 'timed out' or e.args[0] == 11):
				return
			raise
		logger.notice(u"Got connection from client")
		
		cc = None
		try:
			logger.info(u"Creating thread for connection %s" % (len(self._clientConnections)+1))
			cc = ClientConnection(self, sock, self.clientConnectionCallback)
			self._clientConnectionLock.acquire()
			self._clientConnections.append(cc)
			self._clientConnectionLock.release()
			cc.start()
		except Exception, e:
			logger.error(u"Failed to create control connection: %s" % e)
			logger.logException(e)
			self._clientConnectionLock.acquire()
			if cc and cc in self._clientConnections:
				self._clientConnections.remove(cc)
			self._clientConnectionLock.release()
		
	def run(self):
		self._running = True
		logger.notice(u"Starting opsipxeconfd main thread")
		try:
			self._createBackendInstance()
			self._createSocket()
			while self._running:
				self._getConnection()
			logger.notice(u"Opsipxeconfd main thread exiting...")
		except Exception, e:
			logger.logException(e)
		self._running = False
	
	def clientConnectionCallback(self, cc):
		logger.info(u"ClientConnection '%s' finished (took %0.3f seconds)" % (cc.getName(), (time.time() - cc.startTime)))
		
		self._clientConnectionLock.acquire()
		try:
			if cc in self._clientConnections:
				self._clientConnections.remove(cc)
			logger.debug(u"ClientConnection removed")
		except Exception, e:
			logger.error(u"Failed to remove ClientConnection: %s" % e)
		self._clientConnectionLock.release()
	
	def pxeConfigWriterCallback(self, pcw):
		logger.info(u"PXEConfigWriter '%s' finished (took %0.3f seconds)" % (pcw.getName(), (time.time() - pcw.startTime)))
		
		self._pxeConfigWritersLock.acquire()
		try:
			if pcw in self._pxeConfigWriters:
				self._pxeConfigWriters.remove(pcw)
			logger.debug(u"PXE config writer removed")
		except Exception, e:
			logger.error(u"Failed to remove PXE config writer: %s" % e)
		self._pxeConfigWritersLock.release()
		
		#gotAlways = False
		for i in range(len(pcw.productOnClients)):
			pcw.productOnClients[i].setActionProgress(u'pxe boot configuration read')
			#if (pcw.templatefile != self.config['pxeConfTemplate']):
			#
			#if (pcw.productOnClients[i].getActionRequest() == u'always'):
			#	#gotAlways = True
			#	pcw.productOnClients[i].setActionRequest(u'always')
			#else:
			#	pcw.productOnClients[i].setActionRequest(u'none')
		
		#if gotAlways:
		#	self.updateBootConfiguration(pcw.hostId)
		self._backend.productOnClient_updateObjects(pcw.productOnClients)
		
	def status(self):
		logger.notice(u"Getting opsipxeconfd status")
		result  = u'opsipxeconfd status:\n'
		
		self._clientConnectionLock.acquire()
		try:
			result += u'%s control connection(s) established\n' % len(self._clientConnections)
			for i in range(len(self._clientConnections)):
				result += u'    Connection %s established at: %s\n' \
					% (i+1, time.asctime(time.localtime(self._clientConnections[i].startTime)))
		finally:
			self._clientConnectionLock.release()
		
		result += u'\n%s boot configuration(s) set\n' % len(self._pxeConfigWriters)
		for pcw in self._pxeConfigWriters:
			result += u"    Boot config for client '%s', args %s, path '%s' set at: %s\n" \
				% (	pcw.hostId,
					pcw.args,
					pcw.pxefile,
					time.asctime(time.localtime(pcw.startTime) ))
		logger.notice(result)
		return result
	
	def updateBootConfiguration(self, hostId):
		try:
			hostId = forceHostId(hostId)
			logger.info(u"Updating PXE boot configuration for host '%s'" % hostId)
			
			# Remove current pxe config for host
			currentPcws = []
			self._pxeConfigWritersLock.acquire()
			try:
				for pcw in self._pxeConfigWriters:
					if (pcw.hostId == hostId):
						currentPcws.append(pcw)
				for pcw in currentPcws:
					self._pxeConfigWriters.remove(pcw)
			finally:
				self._pxeConfigWritersLock.release()
			
			for pcw in currentPcws:
				pcw.stop()
				while pcw.isAlive():
					time.sleep(0.1)
				logger.notice(u"PXE boot configuration for host '%s' removed" % hostId)
			
			# Get product actions
			productOnClients = self._backend.productOnClient_getObjects(
				productType        = u'NetbootProduct',
				clientId           = hostId,
				actionRequest      = [ 'setup', 'uninstall', 'update', 'always', 'once', 'custom' ]
			)
			
			if not productOnClients:
				return u'Boot configuration updated'
			
			# Get host
			host = self._backend.host_getObjects(id = hostId)
			if not host:
				raise Exception(u"Host '%s' not found" % hostId)
			host = host[0]
			
			# Get pxe config template
			pxeConfigTemplate = None
			for poc in productOnClients:
				if not self._backend.productOnDepot_getObjects(productId = poc.productId, depotId = self.config['depotId']):
					logger.info(u"Product %s not available on depot '%s'" % (poc.productId, self.config['depotId']))
					continue
				
				product = self._backend.product_getObjects(
					id             = poc.productId,
					productVersion = poc.productVersion,
					packageVersion = poc.packageVersion
				)
				if not product:
					raise Exception(u"Product not found: %s_%s-%s" % (poc.productId, poc.productVersion, poc.packageVersion))
				product = product[0]
				if product.pxeConfigTemplate:
					if pxeConfigTemplate and (pxeConfigTemplate != product.pxeConfigTemplate):
						logger.error(u"Cannot use more than one pxe config template, got: %s, %s" \
							% (pxeConfigTemplate, product.pxeConfigTemplate))
					else:
						pxeConfigTemplate = product.pxeConfigTemplate
						logger.notice(u"Special pxe config template '%s' will be used used for host '%s', product '%s'" \
											% (pxeConfigTemplate, hostId, poc.productId))
			if not pxeConfigTemplate:
				pxeConfigTemplate = self.config['pxeConfTemplate']
			
			if not os.path.isabs(pxeConfigTemplate):
				# Not an absolute path
				pxeConfigTemplate = os.path.join( os.path.dirname(self.config['pxeConfTemplate']), pxeConfigTemplate )
			
			logger.debug(u"Using pxe config template '%s'" % pxeConfigTemplate)
			
			# Get name for PXE config file
			pxeConfigName = ''
			if host.getHardwareAddress():
				logger.debug(u"Got hardware address '%s' for host '%s'" % (host.getHardwareAddress(), hostId))
				pxeConfigName = u"01-%s" % host.getHardwareAddress()
			elif host.getIpAddress():
				logger.warning(u"Failed to get hardware address for host '%s', using ip address '%s'" % (hostId, host.getIpAddress()))
				pxeConfigName = '%02X%02X%02X%02X' % tuple( map( lambda i:int(i), host.getIpAddress().split('.') ) )
			else:
				raise Exception(u"Neither hardware address nor ip address known for host '%s'" % hostId)
			pxefile = os.path.join(self.config['pxeDir'], pxeConfigName)
			
			# Get config service id
			serviceUrl = u''
			configState = self._backend.configState_getObjects(objectId = hostId, configId = 'clientconfig.configserver.url')
			if configState:
				serviceUrl = configState[0].getValues()[0]
			
			# Append arguments
			append = {
				'pckey':   host.getOpsiHostKey(),
				'service': serviceUrl,
				'hn':      hostId.split('.')[0],
				'dn':      u'.'.join(hostId.split('.')[1:]),
			}
			if append['pckey']:
				logger.addConfidentialString(append['pckey'])
			
			# Get additional bootimage append params
			configStates = self._backend.configState_getObjects(objectId = hostId, configId = 'opsi-linux-bootimage.append.*')
			for configState in configStates:
				key = configState.configId.replace(u'opsi-linux-bootimage.append.', u'')
				append[key] = u','.join(configState.getValues())
			
			pcw = None
			try:
				logger.info(u"Creating thread for pxeconfig %s" % (len(self._pxeConfigWriters)+1))
				pcw = PXEConfigWriter(pxeConfigTemplate, hostId, productOnClients, append, pxefile, self.pxeConfigWriterCallback)
				self._pxeConfigWritersLock.acquire()
				self._pxeConfigWriters.append(pcw)
				self._pxeConfigWritersLock.release()
				pcw.start()
				logger.notice("PXE boot configuration for host %s is now set at '%s'" % (hostId, pxefile))
				return u'Boot configuration updated'
			except Exception, e:
				logger.error(u"Failed to create pxe config writer: %s" % e)
				self._pxeConfigWritersLock.acquire()
				if pcw and pcw in self._pxeConfigWriters:
					self._pxeConfigWriters.remove(pcw)
				self._pxeConfigWritersLock.release()
				raise
		except Exception, e:
			logger.logException(e)
			raise
	


# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# =                                    CLASS CLIENTCONNECTION                                         =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
class PXEConfigWriter(threading.Thread):
	def _fillPlaceholders(string, backend, context = {}):
		placeholderRegex = re.compile('%\[([a-zA-Z]+)\]([a-zA-Z0-9]+){?([^}]*)}?%')
		match = True
		while match:
			match = placeholderRegex.search(string)
			if match:
				objectClass = match.group(1)
				attribute = match.group(2)
				transformation = match.group(3)
				Class = None
				try:
					Class = eval(objectClass)
					if not issubclass(Class, BaseObject):
						raise Exception(u'Not a subclass of BaseObject')
				except Exception, e:
					logger.error(u"Object class not found: '%s'" % objectClass)
					continue
				
		return string
		
	def __init__(self, templatefile, hostId, productOnClients, append, pxefile, callback = None):
		threading.Thread.__init__(self)
		self.templatefile = templatefile
		self.append = append
		self.hostId = hostId
		self.productOnClients = productOnClients
		self.pxefile = pxefile
		self.startTime = time.time()
		self._callback = callback
		self._pipe = None
		logger.info(u"PXEConfigWriter initializing: templatefile '%s', pxefile '%s', hostId '%s', append %s" \
				% (self.templatefile, self.pxefile, self.hostId, self.append))
		
		if not os.path.exists(self.templatefile):
			raise Exception(u"Template file '%s' not found" % self.templatefile)
		
		# Set pxe config content
		self.content = u''
		f = codecs.open(self.templatefile, 'r', 'utf-8')
		for line in f.readlines():
			line = line.rstrip()
			if line.lstrip().startswith(u'append'):
				append = { 'hn': hostId.split('.')[0] }
				for value in line.strip().split()[1:]:
					(k, v) = (u'', u'')
					if (value.find(u'=') == -1):
						k = value
					else:
						(k, v) = value.split(u'=', 1)
					append[k] = v
				for (k,v) in self.append.items():
					append[k] = v
				
				append[k] = v
				
				line = line.split(u'append')[0] + u'append'
				for (k,v) in append.items():
					line += u' %s' % k
					if v: line += u'=%s' % v
				
			self.content += line + u'\n'
		f.close()
		
		if append.has_key('pckey'):
			del self.append['pckey']
		
		if os.path.exists(self.pxefile):
			os.unlink(self.pxefile)
		os.mkfifo(self.pxefile)
		os.chmod(self.pxefile, 0644)
		
	def run(self):
		self._running = True
		pipeOpenend = False
		while self._running and not pipeOpenend:
			try:
				self._pipe = os.open(self.pxefile, os.O_WRONLY | os.O_NONBLOCK)
				pipeOpenend = True
			except Exception, e:
				if (e.errno != 6):
					raise
				time.sleep(1)
		
		if pipeOpenend:
			logger.notice(u"Pipe '%s' opened, piping pxe boot configuration" % self.pxefile)
			os.write(self._pipe, self.content)
			os.close(self._pipe)
		
		if os.path.exists(self.pxefile):
			os.unlink(self.pxefile)
		
		if pipeOpenend and self._callback:
			self._callback(self)
		
	def stop(self):
		self._running = False

# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# =                                    CLASS CLIENTCONNECTION                                         =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
class ClientConnection(threading.Thread):
	def __init__ (self, opsipxeconfd, socket, callback = None):
		threading.Thread.__init__(self)
		self._opsipxeconfd = opsipxeconfd
		self._socket = socket
		self._callback = callback
		self.startTime = time.time()
	
	def run(self):
		self._running = True
		self._socket.settimeout(1.0)
		
		cmd = self._socket.recv(4096)
		cmd = forceUnicode(cmd.strip())
		logger.info(u"Got command '%s'" % cmd)
		
		result = self._processCommand(cmd)
		logger.info(u"Returning result '%s'" % result)
		
		try:
			self._socket.send(result.encode('utf-8'))
		except Exception, e:
			logger.warning(e)
		
		self._socket.close()
		
		if self._running and self._callback:
			self._callback(self)
	
	def stop(self):
		self._running = False
		if self._socket:
			self._socket.close()
		
	def _processCommand(self, cmd):
		
		try:
			cp = cmd.split()
			
			if (cp[0] == u'stop'):
				self._opsipxeconfd.stop()
				return u'opsipxeconfd is going down'
			
			if (cp[0] == u'status'):
				return self._opsipxeconfd.status()
			
			if (cp[0] == u'update'):
				if (len(cp) != 2):
					raise Exception (u"bad arguments for command 'update', needs <hostId>")
				hostId = forceHostId(cp[1])
				return self._opsipxeconfd.updateBootConfiguration(hostId)
			
			raise Exception(u"Command '%s' not supported" % cmd)
		except Exception, e:
			logger.error(e)
			return u"(ERROR): %s" % e
	
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# =                                   CLASS SERVERCONNECTION                                          =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
class ServerConnection:
	def __init__(self, port):
		self.port = port
	
	def createUnixSocket(self):
		logger.notice(u"Creating unix socket '%s'" % self.port)
		self._socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
		self._socket.settimeout(5.0)
		try:
			self._socket.connect(self.port)
		except Exception, e:
			raise Exception(u"Failed to connect to socket '%s': %s" % (self.port, e))
	
	def sendCommand(self, cmd):
		self.createUnixSocket()
		self._socket.send( forceUnicode(cmd).encode('utf-8') )
		result = None
		try:
			result = forceUnicode(self._socket.recv(4096))
		except Exception, e:
			raise Exception(u"Failed to receive: %s" % e)
		self._socket.close()
		if result.startswith(u'(ERROR)'):
			raise Exception(u"Command '%s' failed: %s" % (cmd, result))
		return result
		
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# -                                         OPSIPXECONFD INIT                                         -
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
class OpsipxeconfdInit(object):
	def __init__(self):
		logger.debug(u"OpsiPXEConfdInit")
		# Set umask
		os.umask(0077)
		self._pid = 0
		
		try:
			(self.opts, self.args) = getopt.getopt(sys.argv[1:], "vFl:c:", [ "no-fork", "loglevel=", "conffile=" ])
		except getopt.GetoptError:
			self.usage()
			sys.exit(1)
		
		if (len(self.args) < 1):
			self.usage()
			sys.exit(1)
		
		self.setDefaultConfig()
		# Process command line arguments
		for (opt, arg) in self.opts:
			if opt in ("-c", '--conffile'):
				self.config['configFile'] = forceFilename(arg)
			if   (opt == "-v"):
				print u"opsipxeconfd version %s" % __version__
				sys.exit(0)
		self.readConfigFile()
		self.setCommandlineConfig()
		
		if (self.args[0] == u'version'):
			print __version__
			sys.exit(0)
		
		elif (self.args[0] == u'start'):
			# Call signalHandler on signal SIGHUP, SIGTERM, SIGINT
			signal(SIGHUP,  self.signalHandler)
			signal(SIGTERM, self.signalHandler)
			signal(SIGINT,  self.signalHandler)
			
			if self.config['daemon']:
				logger.setConsoleLevel(LOG_NONE)
				self.daemonize()
			else:
				logger.setConsoleLevel(self.config['logLevel'])
				logger.setConsoleColor(True)
			
			self.createPidFile()
			try:
				# Start opsiconfd
				self._opsipxeconfd = Opsipxeconfd(self.config)
				self._opsipxeconfd.start()
				time.sleep(3)
				while self._opsipxeconfd.isRunning():
					time.sleep(1)
				self._opsipxeconfd.join(30)
			finally:
				self.removePidFile()
		
		else:
			con = ServerConnection(self.config['port'])
			result = con.sendCommand(u' '.join(forceUnicodeList(self.args)))
			if result:
				if result.startswith(u'(ERROR)'):
					print >> sys.stderr, result
					sys.exit(1)
				print >> sys.stdout, result
				sys.exit(0)
			else:
				sys.exit(1)
	
	def setDefaultConfig(self):
		self.config = {
			'pidFile'                      : u'/var/run/opsipxeconfd/opsipxeconfd.pid',
			'configFile'                   : u'/etc/opsi/opsipxeconfd.conf',
			'depotId'                      : forceHostId(socket.getfqdn()),
			'daemon'                       : True,
			'logLevel'                     : LOG_NOTICE,
			'logFile'                      : u'/var/log/opsi/opsipxeconfd.log',
			'logFormat'                    : u'[%l] [%D] %M (%F|%N)',
			'port'                         : u'/var/run/opsipxeconfd/opsipxeconfd.socket',
			'pxeDir'                       : u'/tftpboot/linux/pxelinux.cfg',
			'pxeConfTemplate'              : u'/tftpboot/linux/pxelinux.cfg/install',
			'maxConnections'               : 5,
			'maxPxeConfigWriters'          : 100,
			'backendConfigDir'             : u'/etc/opsi/backends',
			'dispatchConfigFile'           : u'/etc/opsi/backendManager/dispatch.conf',
			'extensionConfigDir'           : u'/etc/opsi/backendManager/compose.d',
			'aclFile '                     : u'/etc/opsi/backendManager/acl.conf'
		}
	
	def setCommandlineConfig(self):
		for (opt, arg) in self.opts:
			if opt in ("-F", "--no-fork"):
				self.config['daemon'] = False
			if opt in ("-l", "--loglevel"):
				self.config['logLevel'] = forceInt(arg)
		
	def createPidFile(self):
		logger.info(u"Creating pid file '%s'" % self.config['pidFile'])
		if os.path.exists(self.config['pidFile']):
			pf = open(self.config['pidFile'], 'r')
			p = pf.readline().strip()
			pf.close()
			if p:
				running = False
				try:
					for i in execute("%s -x opsipxeconfd" % which("pidof"))[0].strip().split():
						if (i == p):
							running = True
							break
				except Exception, e:
					logger.error(e)
				if running:
					raise Exception(u"Another opsipxeconfd process is running (pid: %s), stop process first or change pidfile." % p )
				
		pid = os.getpid()
		pf = open (self.config['pidFile'], "w")
		print >> pf, str(pid)
		pf.close()
	
	def removePidFile(self):
		try:
			# if (self._pid == os.getpid())
			if os.path.exists(self.config['pidFile']):
				logger.info(u"Removing pid file '%s'" % self.config['pidFile'])
				os.unlink(self.config['pidFile'])
		except Exception, e:
			logger.error(u"Failed to remove pid file '%s': %s" % (self.config['pidFile'], e))
		
	def signalHandler(self, signo, stackFrame):
		for thread in threading.enumerate():
			logger.debug(u"Running thread before signal: %s" % thread)
		
		if (signo == SIGHUP):
			if self._opsipxeconfd:
				self.setDefaultConfig()
				self.readConfigFile()
				self.setCommandlineConfig()
				self._opsipxeconfd.setConfig(self.config)
				self._opsipxeconfd.reload()
		
		if (signo == SIGTERM or signo == SIGINT):
			if self._opsipxeconfd:
				self._opsipxeconfd.stop()
		
		for thread in threading.enumerate():
			logger.debug(u"Running thread after signal: %s" % thread)
		
	def readConfigFile(self):
		''' Get settings from config file '''
		logger.notice(u"Trying to read config from file: '%s'" % self.config['configFile'])
		
		try:
			configFile = ConfigFile(filename = self.config['configFile'])
			for line in configFile.parse():
				if (line.count('=') == 0):
					logger.error(u"Parse error in config file: '%s', line '%s': '=' not found" % (self.config['configFile'], line))
					continue
				(option, value) = line.split(u'=', 1)
				option = option.strip()
				value  = value.strip()
				if (option == 'pid file'):
					self.config['pidFile'] = forceFilename(value)
				elif (option == 'log level'):
					self.config['logLevel'] = forceInt(value)
				elif (option == 'log file'):
					self.config['logFile'] = forceFilename(value)
				elif (option == 'log format'):
					self.config['logFormat'] = forceUnicode(value)
				elif (option == 'pxe config dir'):
					self.config['pxeDir'] = forceFilename(value)
				elif (option == 'pxe config template'):
					self.config['pxeConfTemplate'] = forceFilename(value)
				elif (option == 'max pxe config writers'):
					self.config['maxPxeConfigWriters'] = forceInt(value)
				elif (option == 'max control connections'):
					self.config['maxConnections'] = forceInt(value)
				else:
					logger.warning(u"Ignoring unknown option '%s' in config file: '%s'" % (option, self.config['configFile']))
	
		except Exception, e:
			# An error occured while trying to read the config file
			logger.error(u"Failed to read config file '%s': %s" % (self.config['configFile'], e))
			logger.logException(e)
			raise
		logger.notice(u"Config read")
	
	def usage(self):
		print u"\nUsage: %s [options] <command> [clientId] [args]..." % os.path.basename(sys.argv[0])
		print u"Commands:"
		print u"  version         Show version information and exit"
		print u"  start           Start main process"
		print u"  stop            Stop main process"
		print u"  status          Print status information of the main process"
		print u"  update          update PXE boot configuration for client"
		print u"Options:"
		print u"  -F, --no-fork   Do not fork to background"
		print u"  -c, --conffile  Location of config file"
		print u"  -l, --loglevel  Set log level (default: 4)"
		print u"        0=comment, 1=critical, 2=error, 3=warning, 4=notice, 5=info, 6=debug, 7=debug2, 9=confidential"
		print u""
	
	def daemonize(self):
		# Fork to allow the shell to return and to call setsid
		try:
			self._pid = os.fork()
			if (self._pid > 0):
				# Parent exits
				sys.exit(0)
		except OSError, e:
			raise Exception(u"First fork failed: %e" % e)
		
		# Do not hinder umounts
		os.chdir("/")
		# Create a new session
		os.setsid()
		
		# Fork a second time to not remain session leader
		try:
			self._pid = os.fork()
			if (self._pid > 0):
				sys.exit(0)
		except OSError, e:
			raise Exception(u"Second fork failed: %e" % e)
		
		logger.setConsoleLevel(LOG_NONE)
		
		# Close standard output and standard error.
		os.close(0)
		os.close(1)
		os.close(2)
		
		# Open standard input (0)
		if (hasattr(os, "devnull")):
			os.open(os.devnull, os.O_RDWR)
		else:
			os.open("/dev/null", os.O_RDWR)
		
		# Duplicate standard input to standard output and standard error.
		os.dup2(0, 1)
		os.dup2(0, 2)
		sys.stdout = logger.getStdout()
		sys.stderr = logger.getStderr()



# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# -                                               MAIN                                                -
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
if (__name__ == "__main__"):
	logger.setConsoleLevel(LOG_WARNING)
	exception = None
	
	try:
		OpsipxeconfdInit()
		
	except SystemExit, e:
		pass
		
	except Exception, e:
		exception = e
	
	if exception:
		logger.logException(exception)
		print >> sys.stderr, u"ERROR:", unicode(exception)
		sys.exit(1)
	sys.exit(0)
	

